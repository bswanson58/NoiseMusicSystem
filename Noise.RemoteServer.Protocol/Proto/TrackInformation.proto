syntax = "proto3";
package Noise.RemoteServer.Protocol;

message TrackInfoEmpty {}

message TrackTagInfo {
	int64		TagId = 1;
	string		TagName = 2;
}

message TrackInfo {
	int64		TrackId = 1;
	int64		ArtistId = 2;
	int64		AlbumId = 3;
	string		ArtistName = 4;
	string		AlbumName = 5;
	string		VolumeName = 6;
	string		TrackName = 7;
	int32		TrackNumber = 8;
	int32		Duration = 9;
	int32		Rating = 10;
	bool		IsFavorite = 11;
	repeated TrackTagInfo Tags = 12;
}

message TrackListRequest {
	int64		ArtistId = 1;
	int64		AlbumId = 2;
}

message TrackRatingRequest {
	int64		ArtistId = 1;
	bool		IncludeFavorites = 2;
	int32		IncludeRatingsOver = 3;
}

message TrackTagsRequest {
	int64		TrackId = 1;
	bool		IncludeAnyTag = 2;
}

message TrackSimilarRequest {
	int64		TrackId = 1;
}

message TrackListResponse {
	bool		Success = 1;
	string		ErrorMessage = 2;
	int64		ArtistId = 3;
	int64		AlbumId = 4;
	repeated TrackInfo	TrackList = 5;
}

message TrackUpdateRequest {
	TrackInfo	Track = 1;
}

message TrackUpdateResponse {
	bool		Success = 1;
	string		ErrorMessage = 2;
	TrackInfo	Track = 3;
}

service TrackInformation {
	rpc GetTrackList (TrackListRequest) returns (TrackListResponse);
	rpc GetRatedTracks (TrackRatingRequest) returns (TrackListResponse);
	rpc GetTaggedTracks (TrackTagsRequest) returns (TrackListResponse);
	rpc GetSimilarTracks (TrackSimilarRequest) returns (TrackListResponse);
	rpc GetFavoriteTracks (TrackInfoEmpty) returns (TrackListResponse);
	rpc UpdateTrackRatings (TrackUpdateRequest) returns (TrackUpdateResponse);
	rpc UpdateTrackTags (TrackUpdateRequest) returns (TrackUpdateResponse);
}
