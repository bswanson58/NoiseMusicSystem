<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
					xmlns:NoiseControls="clr-namespace:Noise.UI.Controls;assembly=Noise.UI"
					xmlns:Behaviours="clr-namespace:Noise.UI.Behaviours;assembly=Noise.UI"
					xmlns:ReusableConverters="clr-namespace:ReusableBits.Ui.ValueConverters;assembly=ReusableBits.Ui">

<!-- Add in the MahApps resource so these are based on those -->
<ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
</ResourceDictionary.MergedDictionaries>

    <Color x:Key="SignatureColor">#FFEA6500</Color>
    <SolidColorBrush x:Key="SignatureBrush" Color="{StaticResource SignatureColor}"/>

    <SolidColorBrush x:Key="ControlTextColor" Color="#FF878787" />
	<SolidColorBrush x:Key="TrimColor" Color="#FF878787" />
	<SolidColorBrush x:Key="BorderColor" Color="#FFD0D0D0" />
	<SolidColorBrush x:Key="BorderTextColor" Color="#FFA0A0A0"/>

    <Color x:Key="SpectrumAnalyzerBaseColor">#FFEA6500</Color>
    <Color x:Key="SpectrumAnalyzerPeakColor">#FFFF4500</Color>
    <Color x:Key="SpectrumAnalyzerHoldColor">#FFFF2500</Color>

<Style x:Key="StartupFontStyle" TargetType="Control">
		<Setter Property="FontFamily" Value="Arial"/>
		<Setter Property="FontSize" Value="28"/>
	</Style>
	<Style x:Key="StartupSmallFontStyle" TargetType="Control">
		<Setter Property="FontFamily" Value="Arial"/>
		<Setter Property="FontSize" Value="16"/>
	</Style>
	<Style x:Key="StartupTextStyle" TargetType="TextBlock">
		<Setter Property="FontFamily" Value="Arial"/>
		<Setter Property="FontSize" Value="28"/>
	</Style>
	<Style x:Key="StartupBorderStyle" TargetType="GroupBox" BasedOn="{StaticResource StartupFontStyle}">
		<Setter Property="BorderThickness" Value="1"/>
	</Style>
	<Style x:Key="StartupButtonStyle" TargetType="Button" BasedOn="{StaticResource StartupFontStyle}">
		<Setter Property="FontSize" Value="22"/>
		<Setter Property="Padding" Value="11,3"/>
	</Style>

	<Style x:Key="ExplorerHeaderStyle" TargetType="TextBlock">
		<Setter Property="FontFamily" Value="Segoe UI Semibold"/>
		<Setter Property="FontSize" Value="18"/>
	</Style>
	<Style x:Key="ExplorerTitleStyle" TargetType="TextBlock">
		<Setter Property="FontFamily" Value="Segoe UI"/>
		<Setter Property="FontSize" Value="18"/>
	</Style>
	<Style x:Key="ExplorerSubtitleStyle" TargetType="TextBlock">
		<Setter Property="FontFamily" Value="Segoe UI"/>
		<Setter Property="FontSize" Value="12"/>
	</Style>

	<Style x:Key="LargeTitleStyle" TargetType="TextBlock">
		<Setter Property="FontFamily" Value="Arial"/>
		<Setter Property="FontSize" Value="32"/>
	</Style>

	<Style x:Key="MediumTitleStyle" TargetType="TextBlock">
		<Setter Property="FontFamily" Value="Arial"/>
		<Setter Property="FontSize" Value="28"/>
	</Style>

	<Style x:Key="SmallTitleStyle" TargetType="TextBlock">
		<Setter Property="FontFamily" Value="Arial"/>
		<Setter Property="FontSize" Value="16"/>
	</Style>

	<Style x:Key="ControlTitleStyle" TargetType="TextBlock">
		<Setter Property="FontFamily" Value="Segoe UI"/>
		<Setter Property="FontSize" Value="12"/>
	</Style>

    <Style x:Key="GeneralButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Padding" Value="5,3"/>
	</Style>

    <Style x:Key="GeneralComboStyle" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
		<Setter Property="Padding" Value="5,3"/>
	</Style>
	
	<Style x:Key="TransportButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Height" Value="29"/>
		<Setter Property="Width" Value="29"/>
		<Setter Property="FontFamily" Value="Webdings"/>
		<Setter Property="FontSize" Value="16"/>
	</Style>

    <Style x:Key="QueueButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Height" Value="10"/>
        <Setter Property="Width" Value="24"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FontFamily" Value="Segoe UI Symbol"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="6,0,0,0"/>
    </Style>

	<Style x:Key="ListViewTextStyle" TargetType="TextBlock">
		<Setter Property="FontSize" Value="14"></Setter>
	</Style>

    <Style x:Key="ListViewItemStretch" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource MetroListViewItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>

    <!-- Removes the white border around the GroupBox border -->
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <Style x:Key="SectionBorderStyle" TargetType="GroupBox">
        <Setter Property="BorderBrush" Value="#D5DFE5" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border CornerRadius="4" Grid.Row="1" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="4" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" Background="{TemplateBinding Background}" />
                        <Border Name="Header" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border Grid.Column="0" Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4"  BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding ElementName="Header" Path="ActualWidth" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabControlStyle" TargetType="{x:Type TabItem}">
		<Setter Property="Header" Value="{Binding Content.Tag, RelativeSource={RelativeSource Self}}" />
		<Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource ControlTextColor}"/>
		<Setter Property="FontSize" Value="18"/>
		<Setter Property="Padding" Value="6,1,6,1"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid SnapsToDevicePixels="true">
						<Border x:Name="Bd" BorderThickness="0" CornerRadius="5" Padding="{TemplateBinding Padding}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								
								<ContentPresenter x:Name="Content" Grid.Column="0" ContentSource="Header"
												  HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
												  RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												  VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
								
								<Ellipse x:Name="Marker" Grid.Column="1" Height="5" Width="5" VerticalAlignment="Top" Margin="3,5,0,0" Fill="{StaticResource SignatureBrush}" Visibility="Collapsed"/>
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
					    <MultiTrigger>
					        <MultiTrigger.Conditions>
					            <Condition Property="IsMouseOver" Value="True" />
					            <Condition Property="IsSelected" Value="False" />
					        </MultiTrigger.Conditions>
					        <Setter Property="Foreground" Value="{StaticResource BorderColor}" />
					    </MultiTrigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="FontWeight" Value="Bold"/>
                            <Setter Property="Foreground" Value="{StaticResource SignatureBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
						<DataTrigger Binding="{Binding Content.AllowDrop, RelativeSource={RelativeSource Self}}" Value="True">
							<Setter TargetName="Marker" Property="Visibility" Value="Visible"/>
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Animate on insert for ListBoxItem -->
	<Style x:Key="FocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
	<SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
	<SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
	<SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
	<SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
	<SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>
	<Style x:Key="AnimateOnInsertListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Padding" Value="4,1"/>
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnLoaded">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="Bd">
								<EasingDoubleKeyFrame KeyTime="0" Value="0">
									<EasingDoubleKeyFrame.EasingFunction>
										<CubicEase EasingMode="EaseOut"/>
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
								<EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1">
									<EasingDoubleKeyFrame.EasingFunction>
										<CubicEase EasingMode="EaseOut"/>
									</EasingDoubleKeyFrame.EasingFunction>
								</EasingDoubleKeyFrame>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" RenderTransformOrigin="0.5,0.5">
						<Border.RenderTransform>
							<TransformGroup>
								<ScaleTransform/>
								<SkewTransform/>
								<RotateTransform/>
								<TranslateTransform/>
							</TransformGroup>
						</Border.RenderTransform>
						<Border.LayoutTransform>
							<TransformGroup>
								<ScaleTransform/>
								<SkewTransform/>
								<RotateTransform/>
								<TranslateTransform/>
							</TransformGroup>
						</Border.LayoutTransform>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
						</MultiTrigger>
						<EventTrigger RoutedEvent="FrameworkElement.Loaded">
							<BeginStoryboard Storyboard="{StaticResource OnLoaded}"/>
						</EventTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelectionActive" Value="False"/>
								<Condition Property="IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelectionActive" Value="True"/>
								<Condition Property="IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- TextBox watermarks -->
	<ReusableConverters:BooleanVisibilityConverter x:Key="BooleanVisibilityConverter" />
	<Style x:Key="WaterMarkTextBox" TargetType="{x:Type TextBox}">
		<Setter Property="Behaviours:TextBoxHelper.IsMonitoring" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="EnterGotFocus" >
							<DoubleAnimation Duration="0:0:0.7" To=".2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
						</Storyboard>
						<Storyboard x:Key="ExitGotFocus" >
							<DoubleAnimation Duration="0:0:0.7" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
						</Storyboard>

						<Storyboard x:Key="EnterHasText" >
							<DoubleAnimation Duration="0:0:0.7" From=".2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
						</Storyboard>
						<Storyboard x:Key="ExitHasText" >
							<DoubleAnimation Duration="0:0:0.7" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border Name="Bd" 
							 Background="{TemplateBinding Background}"
							 BorderBrush="{TemplateBinding BorderBrush}"
							 BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" Margin="1" />
							<TextBlock x:Name="Message" Text="{TemplateBinding Behaviours:TextBoxHelper.Watermark}" FontStyle="Italic" Margin="9,0,0,0"
										Foreground="Gray" IsHitTestVisible="False" FontFamily="Calibri" Opacity="0.7" HorizontalAlignment="Left" VerticalAlignment="Center" />
							<Button x:Name="PART_ClearText" BorderThickness="0" Foreground="Gray" Background="Transparent"
										HorizontalAlignment="Right" Margin="3" FontFamily="Segoe UI Symbol" Content="✖" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent},
										Path=(Behaviours:TextBoxHelper.ClearTextButton), Converter={StaticResource BooleanVisibilityConverter}}" IsTabStop="False" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Behaviours:TextBoxHelper.HasText" Value="False"/>
								<Condition Property="IsFocused" Value="True"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource EnterGotFocus}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ExitGotFocus}"/>
							</MultiTrigger.ExitActions>
						</MultiTrigger>

						<Trigger Property="Behaviours:TextBoxHelper.HasText" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource EnterHasText}"/>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ExitHasText}"/>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Gridsplitter Grabber  -->
	<Style x:Key="GridSplitterPreviewStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Fill="#80000000" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="GridSplitterVerticalStyle" TargetType="{x:Type GridSplitter}">
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="PreviewStyle" Value="{StaticResource GridSplitterPreviewStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GridSplitter}">
					<Border x:Name="Grabber" Opacity="0.15" CornerRadius="5"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
						<Canvas Width="7" Height="30" HorizontalAlignment="Center" VerticalAlignment="Center" RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True">
							<Line Stroke="#A0A0A0" StrokeThickness="1" X1="2" Y1="0" X2="2" Y2="30" />
							<Line Stroke="#A0A0A0" StrokeThickness="1" X1="6" Y1="0" X2="6" Y2="30" />
						</Canvas>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger SourceName="Grabber" Property="IsMouseOver" Value="True">
							<Setter TargetName="Grabber" Property="Opacity" Value="1.0"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="GridSplitterHorizontalStyle" TargetType="{x:Type GridSplitter}">
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="PreviewStyle" Value="{StaticResource GridSplitterPreviewStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GridSplitter}">
					<Border x:Name="Grabber" Opacity="0.15" CornerRadius="5"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
						<Canvas Width="30" Height="7" HorizontalAlignment="Center" VerticalAlignment="Center" RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True">
							<Line Stroke="#A0A0A0" StrokeThickness="1" X1="0" Y1="3" X2="30" Y2="3" />
							<Line Stroke="#A0A0A0" StrokeThickness="1" X1="0" Y1="6" X2="30" Y2="6" />
						</Canvas>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger SourceName="Grabber" Property="IsMouseOver" Value="True">
							<Setter TargetName="Grabber" Property="Opacity" Value="1.0"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Play column header style -->
	<DataTemplate x:Key="PlayColumnHeaderTemplate">
		<TextBlock FontFamily="WebDings" Text="4"/>
	</DataTemplate>
	
	<!-- Edit column header style -->
	<DataTemplate x:Key="EditColumnHeaderTemplate">
		<Viewbox Height="12" Width="12">
			<Canvas Width="100" Height="100" ClipToBounds="True">
				<Path>
					<Path.Data>
						<PathGeometry FillRule="Nonzero" Figures="M4.744,4.743C-1.581,11.068,-1.581,21.321,4.744,27.646L27.646,4.743C21.322,-1.582,11.068,-1.582,4.744,4.743z" />
					</Path.Data>
				</Path>
				<Path>
					<Path.Data>
						<PathGeometry FillRule="Nonzero" Figures="M60.893,83.794L100,100 83.795,60.893 33.914,11.013 11.012,33.914 60.893,83.794z M66.105,73.646C68.187,71.562 72.128,72.129 72.998,72.999 72.13,72.131 71.562,68.187 73.644,66.105 75.726,64.023 79.886,63.283 79.886,63.283L89.198,85.753 85.752,89.199 63.282,79.888C63.282,79.889,64.023,75.729,66.105,73.646z" />
					</Path.Data>
				</Path>
			</Canvas>
		</Viewbox>
	</DataTemplate>

	<!-- Play button style -->
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="ButtonNormalBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#F3F3F3" />
        <GradientStop Offset="0.5" Color="#EBEBEB" />
        <GradientStop Offset="0.5" Color="#DDDDDD" />
        <GradientStop Offset="1" Color="#CDCDCD" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />

	<Style x:Key="PlayButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
		<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="Height" Value="15"/>
		<Setter Property="Width" Value="15"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="FontFamily" Value="WebDings"/>
		<Setter Property="FontSize" Value="13.333"/>
		<Setter Property="Content" Value="4"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0"/>
									<VisualTransition GeneratedDuration="0:0:0.3" To="MouseOver">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ellipse1">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
											</ObjectAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ellipse1">
												<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
												<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ellipse">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ellipse">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ellipse1">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ellipse1">
											<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ellipse">
											<EasingColorKeyFrame KeyTime="0" Value="#FFA7C6FF"/>
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ellipse">
											<EasingColorKeyFrame KeyTime="0" Value="Gray"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ellipse">
											<EasingColorKeyFrame KeyTime="0" Value="#FF0056FF"/>
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ellipse">
											<EasingColorKeyFrame KeyTime="0" Value="#FF307BCE"/>
										</ColorAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="contentPresenter">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="contentPresenter">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ellipse1">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ellipse">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.StrokeThickness)" Storyboard.TargetName="ellipse">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ellipse">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ellipse">
											<EasingColorKeyFrame KeyTime="0" Value="#FF81B2F3"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Ellipse x:Name="ellipse" Stroke="#FFC2C2C2" Fill="#FF727272" StrokeThickness="1" Visibility="Visible"/>
						<ContentPresenter x:Name="contentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5">
							<ContentPresenter.RenderTransform>
								<TransformGroup>
									<ScaleTransform/>
									<SkewTransform/>
									<RotateTransform/>
									<TranslateTransform/>
								</TransformGroup>
							</ContentPresenter.RenderTransform>
						</ContentPresenter>
						<Ellipse x:Name="ellipse1" Stroke="Black" StrokeThickness="0" Visibility="Hidden">
							<Ellipse.Fill>
								<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
									<GradientStop Color="#66FFFFFF" Offset="0"/>
									<GradientStop Offset="0.4"/>
								</LinearGradientBrush>
							</Ellipse.Fill>
						</Ellipse>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true"/>
						<Trigger Property="ToggleButton.IsChecked" Value="true"/>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="#ADADAD"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- Rating control -->
	<Style x:Key="NoiseRatingStyle" TargetType="{x:Type NoiseControls:RatingControl}">
		<Setter Property="Height" Value="13"/>
		<Setter Property="RatingCount" Value="5"/>
		<Setter Property="HoverColor" Value="LightBlue"/>
		<Setter Property="RatedColor" Value="{StaticResource SignatureBrush}"/>
		<Setter Property="UnratedColor" Value="{StaticResource ControlTextColor}"/>
		<Setter Property="DislikeColor" Value="Red"/>
	</Style>
	
	<!-- Favorite column header style -->
	<DataTemplate x:Key="FavoriteColumnHeaderTemplate">
		<TextBlock FontFamily="WebDings" Text="Y"/>
	</DataTemplate>
	
	<!-- Favorite Checkbox Style-->
	<SolidColorBrush x:Key="CheckBoxFillNormal" Color="#F4F4F4"/>
	<SolidColorBrush x:Key="CheckBoxStroke" Color="#8E8F8F"/>
	<Style x:Key="EmptyCheckBoxFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CheckRadioFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="FavoriteCheckBoxStyle" TargetType="{x:Type CheckBox}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
		<Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Height" Value="18"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Shine">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed"/>
								<VisualState x:Name="Disabled"/>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="Favorite">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource SignatureColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="Favorite">
											<EasingColorKeyFrame KeyTime="0" Value="#FF939393"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Indeterminate">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="Favorite">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource SignatureColor}"/>
										</ColorAnimationUsingKeyFrames>
										<StringAnimationUsingKeyFrames Storyboard.TargetProperty="Text" Storyboard.TargetName="Favorite">
											<DiscreteStringKeyFrame KeyTime="0" Value="J"/>
										</StringAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.FontFamily)" Storyboard.TargetName="Favorite">
											<DiscreteObjectKeyFrame KeyTime="0">
												<DiscreteObjectKeyFrame.Value>
													<FontFamily>Wingdings</FontFamily>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<TextBlock x:Name="Favorite" TextWrapping="Wrap" Text="Y" FontFamily="Webdings" FontSize="16" Foreground="#FF6E7B95"/>
						<TextBlock x:Name="Shine" TextWrapping="Wrap" Text="Y" FontFamily="Webdings" FontSize="16" Opacity="0" Panel.ZIndex="1">
							<TextBlock.Foreground>
								<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
									<LinearGradientBrush.RelativeTransform>
										<TransformGroup>
											<ScaleTransform CenterY="0.5" CenterX="0.5"/>
											<SkewTransform CenterY="0.5" CenterX="0.5"/>
											<RotateTransform Angle="-30" CenterY="0.5" CenterX="0.5"/>
											<TranslateTransform/>
										</TransformGroup>
									</LinearGradientBrush.RelativeTransform>
									<GradientStop Color="#CCFFFFFF" Offset="0"/>
									<GradientStop Offset="0.4"/>
								</LinearGradientBrush>
							</TextBlock.Foreground>
						</TextBlock>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
							<Setter Property="Padding" Value="4,0,0,0"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
</ResourceDictionary>